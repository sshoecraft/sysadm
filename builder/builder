#!/bin/bash

BUILDER_VERSION=2.22
# 1.00 init
# 1.01 added resolver for ilo
# 1.02 added -p <profile> option
# 1.03 put os list into builder_os.dat
# 1.04 added -g <gateway> option
# 2.00 change parms, change detect, add drac support
# 2.01 remove static PV server settings, put all in builder_pv.dat
# 2.02 add defnet when not provided by _pv.dat
# 2.03 also check user_net against _pv
# 2.04 update idrac commands for new m640s
# 2.05 revamp drac commands for vrtx
# 2.06 tweak drac version checks
# 2.07 10/08/20 add netmask/bits to pv
# 2.08 10/15/20 remove defnet from pv, add pv_gw
# 2.09 10/20/20 display console ip and ver, allow diff NS in pv.dat
# 2.10 10/28/20 if bcast -1 does not ping, try 1 else fail
# 2.11 11/15/20 dont ping computed gw, fixup dell build
# 2.12 -g (mygw) was being ignored, forgw gw=mygw if not empty
# 2.13 add -f flag to force reboot on dell vrtx
# 2.14 add -U flag to provide user url (iso)
# 2.15 call getwiniso to get a windows image
# 2.16 update builder_pv to use subnets and add in_subnet func
# 2.17 add -m <netmask> option
# 2.18 ?? where'd this go
# 2.19 disable integraded SD cards on dell
# 2.20 2023-02-03 fix subnet code
# 2.21 2023-08-31 fix drac boot order settings
# 2.22 2023-09-12 disable 2nd embedded NIC and TPM on Dell

. /usr/local/etc/sysenv

vm_def_cpu=1
vm_def_mem=2
vm_def_lin_hd=20
vm_def_win_hd=80
#dell_mount_type=nfs
#dell_mount_type=http
dell_mount_type=cifs

usage() {
	echo "usage: $0 [-ivpgo ] <server name> <ilo> <os profile> [vlan]"
	echo "   where:"
	echo "     -i <ip>            override ip address"
#	echo "     -a <app>           set cluster for VMware host builds"
	echo "     -v <osver>         override OS version"
	echo "     -p <profile>       override OS profile"
	echo "     -g <gateway>       override network gateway"
	echo "     -e <vcenter>       specify vcenter servr"
	echo "     -w <waystation>    override waystation"
	echo "     -c <ip>            specify console IP"
	echo "     -u <username>      override ilo/drac username"
	echo "     -s <username>      override ilo/drac password"
	echo "     -E                 enable efi"
	echo "     -o                 display list of supported OSes"
	echo "     -l                 display long list of supported OSes"
	echo "     -f                 force reboot on dell"
	exit 1
}
test -z "$1" && usage

tools=/usr/local/lib/tools
lib=/usr/local/lib/builder
if test `echo $0 | grep -c '^\./'` -eq 1; then
	tools="."
	lib="."
fi
RAC="/opt/dell/srvadmin/bin/idracadm7 --nocertwarn"
vm_tmpl=$lib/vm_template.xml
is_vm=0
is_kvm=0
is_ilo=0

ipcalc_cmd=$(which ipcalc)
if test -z "$ipcalc_cmd"; then
	echo "ipcalc command not found, please install it."
	exit 1
fi
if test $(ipcalc --help | grep -c \\-\-network) -gt 0; then
	ipcalc_rh=1
else
	ipcalc_rh=0
fi

# Slurp os.dat
let x=0
declare -A os
while read name dist ver arch profile vm_id vm_nic vm_net vm_defs vm_opts rest
do
	let y=0
	test `echo "$name" | grep -c '^#'` -gt 0 && continue
	os[$x,$((y++))]=$name
	os[$x,$((y++))]=$dist
	os[$x,$((y++))]=$ver
	os[$x,$((y++))]=$arch
	os[$x,$((y++))]=$profile
	os[$x,$((y++))]=$vm_id
	os[$x,$((y++))]=$vm_nic
	os[$x,$((y++))]=$vm_net
	os[$x,$((y++))]=$vm_defs
	os[$x,$((y++))]=$vm_opts
	os[$x,$((y++))]=$rest
	((x++))
done < $lib/builder_os.dat
let num_rows=$x

logdir=$HOME/logs
mkdir -p $logdir/builds

declare -A opts
let i=0
opts[$((i++))]="cluster,1,Specify cluster for VM builds (req'd for VM builds)"
opts[$((i++))]="console,1,Specify console for physical hosts"
opts[$((i++))]="vcenter,1,Specify vCenter server for VM builds"
opts[$((i++))]="ip,1,Specify IP"
opts[$((i++))]="version,1,Specify OS Version"
opts[$((i++))]="profile,1,Specify OS Profile"
opts[$((i++))]="gateway,1,Specify Gateway"
opts[$((i++))]="user,1,Specify console user"
opts[$((i++))]="pass,1,Specify console pass"
opts[$((i++))]="dry-run,0,Dont take any action - just generate ISO"
opts[$((i++))]="way,1,Specify COE waystation"
opts[$((i++))]="list-os,1,List supported OSes"
opts[$((i++))]="long-os,1,Long list supported OSes"

#buildopts $opts

app=""
mygw=""
anno=""
myway=""
noact=0
noreset=0
force_reboot=0
vc=""
efi=1
bios=0
skip=0
while true
do
	case "$1" in
	"-a")
		shift
		app=$1
		shift
		;;
	"-b")
		shift
		vm_def_lin_hd=$1
		vm_def_win_hd=$1
		shift
		;;
	"-c")
		shift
		ilo=$1
		shift
		;;
	"-e")
		shift
		vc=$1
		shift
		;;
	"-i")
		shift
		ip=$1
		shift
		;;
	"-B")
		bios=$1
		shift
		;;
	"-E")
		efi=1
		shift
		;;
	"-I")
		shift
		user_nic=$1
		shift
		;;
	"-N")
		shift
		user_net=$1
		shift
		;;
	"-U")
		shift
		user_url=$1
		shift
		;;
	"-v")
		shift
		osver=$1
		shift
		;;
	"-p")
		shift
		osprofile=$1
		shift
		;;
	"-g")
		shift
		mygw=$1
		shift
		;;
	"-m")
		shift
		mynm=$1
		shift
		;;
	"-u")
		shift
		ilo_user=$1
		dracuser=$1
		shift
		;;
	"-r")
		noact=1
		shift
		;;
	"-R")
		noreset=1
		shift
		;;
	"-s")
		shift
		ilo_pass="$(echo "$1" | base64)"
		dracpass="$ilo_pass"
		shift
		;;
	"-w")
		shift
		myway=$1
		shift
		;;
	"-S")
		skip=1
		shift
		;;
	"-o")
		shift
		echo -n "Available OSes: "
		for ((x=0; x <= num_rows; x++)); do
			test "${os[$x,0]}" = "rh7-flex" && continue
			echo -n "${os[$x,0]} "
		done
		echo ""
		exit 0
		;;
	"-l")
		shift
#		echo "Available OSes:"
		for ((x=0; x < num_rows; x++)); do
			test "${os[$x,0]}" = "rh7-flex" && continue
			echo "${os[$x,0]}"
		done
		exit 0
		;;
	"-V")
		shift
		echo "Builder version $version"
		exit 0
		;;
	"-f")
		shift
		force_reboot=1
		;;
	"-h")
		echo "Builder version $version"
		usage;;
	*)
		break;;
	esac
done
test `echo "$1" | grep -c '^\-'` -gt 0 && usage
test $bios -eq 1 && efi=0

if test -z "$ip"; then
	name=$(host "$1" | grep 'has address' | head -1 | awk '{ print $1 }')
	if test -z "$name"; then
		echo "error: $1 not found in DNS!"
		exit 1
	fi
else
	name="$1"
fi
shortname=`echo $name | awk -F. '{ print $1 }'`
logfile=$logdir/builds/$shortname.log
ilo="$2"
test "$ilo" = "-" && ilo="unknown"
osp="$3"
osp=`echo "$osp" | sed "s:^psp:spp:"`
vlan=$4
test -z "$osp" && usage

#tmp=/tmp/builder.dat
tmp=/tmp/builder.$$
tmplog=/tmp/builder.log.$$
#trap '{ echo "Aborting." ; rm -f $tmp $tmplog; exit 1; }' INT TERM ABRT

# Get IP
if test -z "$ip"; then
#	ip=$(nslookup $name 2>/dev/null | awk 'NR>3 && /Address:/{print $2}' | tail -1)
	ip=$(host $name | grep 'has address' | head -1 | awk '{ print $NF }')
fi
test -n "$vlan" && VLSTR=", VLAN: $vlan"
echo "Hostname: $name, IP: $ip$VLSTR"

function ip_to_int {
	local readonly ip_addr="${1}"
	local ip_1 ip_2 ip_3 ip_4

	ip_1=$(echo "${ip_addr}" | cut -d'.' -f1)
	ip_2=$(echo "${ip_addr}" | cut -d'.' -f2)
	ip_3=$(echo "${ip_addr}" | cut -d'.' -f3)
	ip_4=$(echo "${ip_addr}" | cut -d'.' -f4)

	echo "$(( ip_1 * 256**3 + ip_2 * 256**2 + ip_3 * 256 + ip_4 ))"
}

function in_subnet() {
	# Determine whether IP address is in the specified subnet.
	#
	# Args:
	#   cidr_subnet: Subnet, in CIDR notation.
	#   ip_addr: IP address to check.
	#
	# Returns:
	#   0|1
	#
	local readonly cidr_subnet="${1}"
	local readonly ip_addr="${2}"
	local subnet_ip cidr_mask netmask ip_addr_subnet subnet rval

	subnet_ip=$(echo "${cidr_subnet}" | cut -d'/' -f1)
	cidr_mask=$(echo "${cidr_subnet}" | cut -d'/' -f2)

	netmask=$(( 0xFFFFFFFF << $(( 32 - ${cidr_mask} )) ))

	# Apply netmask to both the subnet IP and the given IP address 
	ip_addr_subnet="$(( netmask & $(ip_to_int ${ip_addr}) ))"
	subnet="$(( netmask & $(ip_to_int ${subnet_ip}) ))"

	# Subnet IPs will match if given IP address is in CIDR subnet
#	[ "${ip_addr_subnet}" == "${subnet}" ] && rval=0 || rval=1
	if test ${ip_addr_subnet} -eq ${subnet}; then
		rval=0
	else
		rval=1
	fi

#	echo "rval: $rval"
	return $rval
}

# Get PV server
OIFS="$IFS"
IFS="." read -a ipa <<<$(echo $ip)
IFS=","
found=0
prefix=24
while read -r pv_subnet pv_way pv_sys_way pv_ilo_way pv_gw pv_ns
do
	test $(echo "$pv_subnet" | grep -c '^#') -gt 0 && continue
	if test -n "$pv_subnet"; then
		if in_subnet "$pv_subnet" "$ip"; then
			found=1
		fi
		if test $found -eq 0; then
			if test -n "$user_net"; then
				if in_subnet "$pv_subnet" "$user_net"; then
					found=1
				fi
			fi
		fi
	fi
	pv_size=$(echo "$pv_subnet" | awk -F/ '{ print $2 }')
	pv_subnet=$(echo "$pv_subnet" | awk -F/ '{ print $1 }')
	test $found -eq 1 && break
done < $lib/builder_pv.dat
if test $found -eq 1; then
	way=$pv_way
	sys_way=$pv_sys_way
	ilo_way=$pv_ilo_way
	test -n "$pv_size" && prefix=$pv_size
	ns=$pv_ns
fi
IFS="$OIFS"
test -z "$ns" && ns=10.5.205.11

if test $(echo $ip | grep -ic 'dhcp') -eq 0; then
	# For VM builds
#	echo "ipcalc: $ipcalc_cmd, rh: $ipcalc_rh"
	if test $ipcalc_rh -eq 1; then
		network=$($ipcalc_cmd --network $ip/$prefix | awk -F= '{ print $2 }' | sed 's:\.0::g')
		# Get mask
		netmask=$($ipcalc_cmd --netmask $ip/$prefix | awk -F= '{ print $2 }')
		# Find GW
		bcast=$($ipcalc_cmd --broadcast $ip/$prefix | awk -F= '{ print $2 }')
	else
		$ipcalc_cmd $ip/$prefix > $tmp 2>/dev/null
		network=$(cat $tmp | grep ^Network | awk '{ print $2 }' | awk -F/ '{ print $1 }')
		netmask=$(cat $tmp | grep ^Netmask | awk '{ print $2 }')
		bcast=$(cat $tmp | grep ^Broadcast | awk '{ print $2 }')
	fi
	n=$(echo $bcast | awk -F. '{ print $4 }')
	((n--))
	s=$(echo $bcast | awk -F. '{ print $1"."$2"."$3 }')
	if test -0 -eq 1; then
		if ! $(ping -c 2 -W 2 ${s}.${n} > /dev/null 2>&1); then
			n=1
			if ! $(ping -c 2 -W 2 ${s}.${n} > /dev/null 2>&1); then
				echo "error: unable to determine GW!"
				exit 1
			fi
		fi
	fi
	if test -n "$pv_gw"; then
		gw=$pv_gw
	else
		gw=${s}.${n}
	fi
fi
#exit 0
test -n "$mygw" && gw=$mygw
test -n "$mynm" && netmask="$mynm"
echo "Network: $network, netmask: $netmask, bcast: $bcast, gw: $gw"
#exit 0

test -n "$myway" && way="$myway"
if test -z "$way"; then
	way=$(host "linuxcoe" | grep 'has address' | head -1 | awk '{ print $NF }')
	if test -z "$way"; then
		if test -f /usr/local/etc/defway; then
			way=$(cat /usr/local/etc/defway)
		fi
	fi
fi
if test -z "$way"; then
	echo "error: unable to determine COE waypoint"
	echo "check $lib/builder_pv.dat and/or set default in /usr/local/etc/defway"
	exit 1
fi
echo "Waystation: $way"

# New log
rm -f $logfile; touch $logfile
echo "args: $*" > $logfile

# Validate osp
dist=""
for ((x=0; x <= num_rows; x++)); do
	if test "${os[$x,0]}" = "$osp"; then
		dist="${os[$x,1]}"
		ver="${os[$x,2]}"
		arch="${os[$x,3]}"
		profile="${os[$x,4]}"
		id="${os[$x,5]}"
		nic="${os[$x,6]}"
		net="${os[$x,7]}"
		defs="${os[$x,8]}"
		opts="${os[$x,9]}"
		def_cpu=`echo $defs | awk -F, '{ print $1 }'`
		test -z "$def_cpu" && def_cpu=$vm_def_cpu
		def_mem=`echo $defs | awk -F, '{ print $2 }'`
		test -z "$def_mem" && def_mem=$vm_def_mem
		def_hd=`echo $defs | awk -F, '{ print $3 }'`
		test -z "$def_hd" && def_hd=$vm_def_lin_hd
		break
	fi
done
if test -z "$dist"; then
	echo "error: unknown os name ($osp)!"
	exit 1
fi

# Detect destination

if test $noact -eq 1; then
	# Do nothing
	:
# Detect VM build
elif test $(echo $ilo | grep -c '^qemu') -gt 0; then
	is_kvm=1
	uri=$(echo $ilo | awk -F- '{ print $1 }')
	info=$(echo $ilo | awk -F- '{ print  $2 }')
	c=`echo $info | awk -F, '{ print $1 }'`
	test -z "$c" && c=$def_cpu
	g=`echo $info | awk -F, '{ print $2 }'`
	test -z "$g" && g=$def_mem
	h=`echo $info | awk -F, '{ print $3 }'`
	test -z "$h" && h=0
elif test `echo $ilo | grep -c +` -gt 0; then
	is_vm=1
	loc=`echo $ilo | awk -F: '{ print  $1 }'`
	dc=`echo $loc | awk -F+ '{ print $1 }'`
	cl=`echo $loc | awk -F+ '{ print $2 }'`
	info=`echo $ilo | awk -F: '{ print  $2 }'`
	c=`echo $info | awk -F, '{ print $1 }'`
	test -z "$c" && c=$def_cpu
	g=`echo $info | awk -F, '{ print $2 }'`
	test -z "$g" && g=$def_mem
	h=`echo $info | awk -F, '{ print $3 }'`
	test -z "$h" && h=0
	a=`echo $ilo | awk -F: '{ print  $4 }'`
	echo "VM: DC: $dc, Cluster: $cl, vCPU: $c, MEM: $g, OSHD: $def_hd, HDS: $h, ANN: $a"
	# Get the VC server, then creds
	if test -z "$vc"; then
		test -x /usr/local/bin/farminfo && vc=`/usr/local/bin/farminfo --server $cl | grep -v "not found" | head -1`
		if test -z "$vc"; then
			echo "unable to determine VC server, please specify"
			exit 1
		fi
	fi
	vcuser=`cat /usr/local/etc/.vim | grep ^$vc | awk '{ print $2 }'`
	if test -z "$vcuser"; then
		echo "unable to get vcuser for $vc"
		exit 1
	fi
	vcpass=`vim_cred -x -s "$vc" -u "$vcuser"`
else
	# Get console ip
#	ilo=`/usr/local/bin/pulldb --ip $name | awk '{ print $2 }'`
#	if test -z "$ilo"; then
#		ilo=`/usr/local/bin/getcons $name`
#		if test "$ilo" = "unknown"; then
#			echo "unable to determine console automatically, please specify with -c"
#			exit 1
#		fi
#	fi

	# Test if IP
	if test `echo $ilo | grep -c -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'` -eq 0; then
#		ilo=$(nslookup $ilo 2>/dev/null | awk 'NR>3 && /Address:/{print $2}')
		ilo=$(host $ilo | grep 'has address' | head -1 | awk '{ print $NF }')
		if test `echo $ilo | grep -c -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'` -eq 0; then
			ilo=`getcons $shortname`
			test -z "$ilo" && ilo=unknown
			if test "$ilo" = "unknown"; then
				echo "error: unable to determine ilo ip"
				exit 1
			fi
		fi
	fi
	ilo_ver=`$tools/detect_ilo -u "$ilo_user" -p "$ilo_pass" $ilo | awk '{ print $1 }'`
	if test `echo $ilo_ver | awk -F, '{ print $1 }'` -eq 0; then
		ilo_ver=$($tools/detect_drac -u "$dracuser" -p "$dracpass" $ilo)
	else
		# Upgrade iLO, if necessary
		is_ilo=1
		$tools/check_ilo -u "$ilo_user" -p "$ilo_pass" $ilo
		test $? -ne 0 && exit 1
	fi
	if test `echo $ilo_ver | awk -F, '{ print $1 }'` -eq 0; then
		echo "error: unable to validate console (resolve/login/etc)"
		exit 1
	fi
	echo "Console IP: $ilo, version: $(echo $ilo_ver | awk -F, '{ print $2 }')"
fi

# Get iso url based on os profile
if test -n "$user_url"; then
	echo "Setting ISO to $user_url"
	url="$user_url"
elif test "$dist" = "iso"; then
	echo "Setting ISO to $ver"
	url="http://$way/LinuxCOE/iso/$ver"
else
	test -n "$osver" && ver="$osver"
	test -n "$osprofile" && profile="$osprofile"
	test -z "$vlan" && vlan=0
	echo "Dist: $dist, Version: $ver, Arch: $arch, Profile: $profile"
	echo "Generating ISO..."
	#<hostname> <distro> <version> <arch> [<way> <profile> <ip> <vlan> <netmask> <gateway> <nameserver>]
	test -n "$user_nic" && NIC="-I $user_nic"
#	if test "$dist" = "Windows"; then
#		$tools/getwiniso $way $name $ip $gw > $tmp 2>&1
#	else
		if test -n "$sys_way"; then
			eval $tools/getiso $NIC -w $way $name $dist $ver $arch $sys_way $profile $ip $vlan $netmask $gw $ns > $tmp 2>&1
		else 
			eval $tools/getiso $NIC $name $dist $ver $arch $way $profile $ip $vlan $netmask $gw $ns > $tmp 2>&1
		fi
#	fi
	url="$(cat $tmp | grep ^URL= | awk -F= '{ print $2 }')"
	echo "url: $url" >> $logfile
	if test -z "$url"; then
		echo "ERROR: unable to get ISO for $shortname! reason:"
		echo "cmd: "  $tools/getiso $name $dist $ver $arch $way $profile $ip $vlan $netmask $gw $ns
		cat $tmp
		exit 1
	fi
fi
#exit 0

ilocmd() {
	$tools/locfg.pl -s $ilo -u $ilo_user -p $(echo $ilo_pass | base64 -d) -f $2 > $tmplog
	if test `cat $tmplog | grep "MESSAGE=" | grep -c -v 'No error'` -gt 0; then
		cat $tmplog >> $logfile
		if test $1 -eq 1; then
			echo "ERROR: message from ilo"
			cat $tmplog
			exit 1
		fi
	fi
}

waitpower() {
	$tools/locfg.pl -s $ilo -u $ilo_user -p $(echo $ilo_pass | base64 -d) -f $lib/powerstate.xml > $tmplog
	retry=15
	while test `cat $tmplog | grep HOST_POWER= | awk -F= '{ print $2 }' | grep -c ON` -ne $1
	do
		sleep 2
		$tools/locfg.pl -s $ilo -u $ilo_user -p $(echo $ilo_pass | base64 -d) -f $lib/powerstate.xml > $tmplog
		let retry=$retry-1
		test $retry -eq 0 && return 1
	done
	cat $tmplog >> $logfile
	return 0
}

dracerr() {
	echo "error:"
	cat $tmplog
	exit 1
}

mkdjob() {
	jname="$1"
	shift
	test -z "$jname" && jname=BIOS.Setup.1-1
	opt="$*"
	test -z "$opt" && opt="--realtime"
	$DODRAC jobqueue create "$jname" $opt > $tmplog 2>&1
	test $? -ne 0 && dracerr
	JID=$(cat $tmp | tr '\r' '\n' | grep '^Commit JID = ' | awk '{ print $NF }')
	if test -n "$JID"; then
		while true
		do
			$DODRAC jobqueue view -i $JID | tr '\r' '\n' > $tmp
			pct=$(cat $tmp | grep 'Percent Complete=' | awk -F'[' '{ print $2 }' | sed 's:]::')
			test "$pct" = "100" && break
			sleep 5
		done
	fi
}

dwaitmode() {
	echo "Waiting for mode to change..."
	while true
	do
	 	$DODRAC get BIOS.BiosBootSettings.BootMode > $tmplog 2>&1
		if test $? -eq 217; then
			sleep 10
			continue
		fi
                test $? -ne 0 && dracerr
		if test $(cat $tmplog | grep -c -i Pending) -gt 0; then
			sleep 30
			continue
		fi
                mode=$(cat $tmplog | tr '\r' '\n' | grep ^BootMode= | awk -F= '{ print $2 }' | awk '{ print $1 }')
		if test "$mode" = "$1"; then
			echo "Mode changed!"
			break
		else	
			echo "Mode change failed!"
			return 1
		fi
	done
	return 0
}

set_bo() {
ilocmd 1 $lib/get_bo.xml
dos2unix $tmplog > /dev/null 2>&1
#cat $tmplog
let start=0
yes=/tmp/builder_1.$$
no=/tmp/builder_2.$$
cmd=/tmp/builder_3.$$
rm -f $yes $no; touch $yes $no
while read line
do
	if test $start -eq 0; then
		if test "$line" = "<PERSISTENT_BOOT>"; then
			let start=1
		fi
	else
		test "$line" = "</PERSISTENT_BOOT>" && break
		value=`echo "$line" | awk -F= '{ print $2 }' | awk '{ print $1 }'`
#		echo "value: $value"
		desc=`echo "$line" | awk -F= '{ print $3 }'`
		if test `echo "$value" | grep -c "HDD"` -gt 0; then
			echo "$line" >> $yes
		elif test `echo "$value" | grep -c "Unknown"` -gt 0; then
			continue
		elif test `echo "$desc" | grep -c "Smart Array"` -gt 0; then
			echo "<DEVICE value=$value />" >> $yes
		elif test `echo "$desc" | grep -c "USB Boot"` -gt 0; then
			echo "<DEVICE value=$value />" >> $yes
		elif test `echo "$line" | grep -c "DESCRIPTION="` -gt 0; then
			echo "<DEVICE value=$value />" >> $no
		else
			echo "$line" >> $no
		fi
	fi
done < $tmplog
cat > $cmd << EOF
<RIBCL VERSION="2.0">
  <LOGIN USER_LOGIN="adminname" PASSWORD="password">
   <SERVER_INFO MODE="write">
     <SET_PERSISTENT_BOOT>
EOF
cat $yes >> $cmd
cat $no >> $cmd
cat >> $cmd << EOF
     </SET_PERSISTENT_BOOT>
   </SERVER_INFO>
  </LOGIN>
</RIBCL>
EOF
#cat $cmd
ilocmd 1 $cmd
rm -f $yes $no $cmd
}

if test $noact -eq 1; then
	echo "Taking no action..."
	echo "url: $url"
elif test $is_kvm -eq 1; then
	iso=$(basename $url)
#	os_size=`echo "$def_hd 1024 * p" | dc`
	if test ! -f /vms/${shortname}.img; then
		sudo qemu-img create -f qcow2 /vms/${shortname}.img ${def_hd}G
	fi
	mydist=${dist}
	test "$mydist" = "RedHat" && mydist=rhel
	test "$mydist" = "CentOS" && mydist=rhel
#	test "$mydist" = "Oracle" && mydist=oracle
	variant=$(echo "${mydist}${ver}.0" | tr "[:upper:]" "[:lower:]")
        m=`echo "$g 1024 * p" | dc`
	virt-install --connect qemu:///system \
		--name=${shortname} --vcpus=$c --memory=$m \
		--network bridge:virbr0,model=virtio \
		--disk path=/vms/${shortname}.img \
		--os-type=linux --os-variant=${variant} \
		--graphics vnc,listen=0.0.0.0 --noautoconsole \
		--cdrom=/scratch/systemdesigner/${iso}
#	virt-install --name=$name \
#		--vcpus=$c \
#		--memory=$m \
#		--network bridge:br0,model=virtio \
#		--disk path=/data/kvm/${shortname}.img,format=qcow2,size=${def_hd}G \
#		--os-type=linux --os-variant=${variant} \
#		--graphics vnc,listen=0.0.0.0 --noautoconsole \
#		--cdrom=/scratch/systemdesigner/$iso
elif test $is_vm -eq 1; then
#	echo "Creating VM..."
	hwver="vmx-07"
        m=`echo "$g 1024 * p" | dc`
	for hd in 1 2 3 4; do
#		echo "hd: $hd"
		t1=$(echo "$h" | awk -F+ "{ print \$$hd }")
#		echo "t1: $t1"
        	t2=`echo $t1 | sed "s:GB$::"`
#		echo "t2: $t2"
		test -z "$t2" && t2=0
		hd[$hd]=$(($t2*1024))
	done
#	s=`echo "$t 1024 * p" | dc`
	test -z "$net" && net=$network
	test -z "$nic" && nic="vmxnet3"
	test -z "$id" && id="otherGuest64"
	iso=`basename $url`
	os_size=`echo "$def_hd 1024 * p" | dc`
	test -n "$user_net" && net="$user_net"
	cat $vm_tmpl | sed -e "s|+HWVER+|$hwver|" -e "s|+NAME+|$shortname|" \
		-e "s:+DC+:$dc:" -e "s:+CLUST+:$cl:" \
		-e "s:+VCPU+:$c:" -e "s:+MEM+:$m:" -e "s:+OSSIZE+:$os_size:" \
		-e "s:+HD1SIZE+:${hd[1]}:" -e "s:+HD2SIZE+:${hd[2]}:" -e "s:+HD3SIZE+:${hd[3]}:" -e "s:+HD4SIZE+:${hd[4]}:" \
		-e "s:+NIC+:$nic:" -e "s/+NET+/$net/" -e "s:+ID+:$id:" -e "s:+ISO+:$iso:" \
		-e "s:+ANN+:$a:" -e "s:+PROFILE+:$osp:" -e 's:+SERVER+:$vc:' > $tmp
		$tools/create_vms.pl --server $vc --username "$vcuser" --password "$vcpass" --opts "$opts" --file $tmp
	if test $? -ne 0; then
		echo "config file: $tmp"
		exit 1
	fi
else
	test -n "$app" && setfarm $shortname $app
	# if ilo_way is set, fixup url
	test -n "$ilo_way" && url=`echo $url | sed "s:$way:$ilo_way:"`
#	echo "url: $url"
	if test $is_ilo -eq 1; then
		# Get iLO creds
#		echo "Resetting system..."
#		ilocmd 0 $lib/cold.xml
#		sleep 5
#		waitpower 1
		echo "Powering off system..."
		go=1
		while test $go -eq 1
		do
			ilocmd 0 $lib/poweroff.xml
			waitpower 0
			go=$?
		done
		if test $efi -eq 1; then
			ilocmd 0 $lib/uefi.xml
		else
			ilocmd 0 $lib/legacy.xml
		fi
		echo "Mounting Image: $url"
		cat $lib/mount.xml | sed "s|_URL_|$url|" > $tmp
		ilocmd 1 $tmp
#		set_bo
		ilocmd 1 $lib/one_time.xml
		echo "Powering on system..."
		ilocmd 1 $lib/poweron.xml
		waitpower 1
		status=`/usr/local/bin/powerop status $ilo`
		test -z "$status" && status="X"
		if test "$status" != "ON"; then
			ilocmd 1 $lib/poweron.xml
			waitpower 1
		fi
	else
		dracver=$(echo $ilo_ver | awk -F, '{ print $1 }')
		test -z "$dracver" && dracver=4
#		echo "dracver: $dracver"
		DODRAC="$RAC -r $ilo -u $dracuser -p $(echo $dracpass | base64 -d)"
set_idrac() {
#		if test -n "$dracver"; then
#			$DODRAC fwupdate -p -u -d <Path to folder where firmimg.d6 image available>
#		fi
		echo "Clearing job que..."
		$DODRAC jobqueue delete --all > /dev/null 2>&1
#		XXX do this if it says "PENDING JOBS even after clear"
#		$DODRAC jobqueue delete -i JID_CLEARALL_FORCE > /dev/null 2>&1
#		sleep 120
#		$DODRAC racreset
                echo "Disabling Integrated SD..."
                $DODRAC set bios.IntegratedDevices.InternalSdCard Off > /dev/null 2>&1
                echo "Creating virtual disk (if not present)..."
                cont=$($DODRAC storage get controllers 2>/dev/null| tr '\r' '\n' | grep ^RAID)
                if test -n "$cont"; then
			$DODRAC raid get pdisks -o -p state 2>/dev/null | tr '\r' '\n' | grep ^Disk > $tmp
			disks=""
			while read disk
			do
				# Only do bay 0 and bay 1
#				test $(echo "$disk" | grep -c -e 'Disk.Bay.0' -e 'Disk.Bay.1')
				test -n "${disks}" && disks="${disks},"
				disks="${disks}${disk}"
			done < $tmp
			if test -n "$disks"; then
				$DODRAC clearpending $cont > /dev/null 2>&1
				$DODRAC storage createvd:$cont -rl r1 -ss 128k -pdkey:"${disks}" > $tmplog 2>&1
				if test $? -eq 0; then
					echo "Applying configuration..."
					mkdjob $cont --realtime
				fi
			fi
		fi
		to_efi=0
		to_bios=0
		if test "$mode" = "Uefi"; then
			test $efi -eq 0 && to_bios=1
		else
			test $efi -eq 1 && to_efi=1
		fi
		if test $to_bios -eq 1; then
			echo "Setting Boot Mode to BIOS..."
			$DODRAC clearpending BIOS.Setup.1-1 > /dev/null 2>&1
			$DODRAC set BIOS.BiosBootSettings.BootMode Bios > $tmplog 2>&1
			test $? -ne 0 && dracerr
			mkdjob BIOS.Setup.1-1 -r pwrcycle -s TIME_NOW
			dwaitmode Bios
			test $? -ne 0 && dracerr
			sleep 30
		elif test $to_efi -eq 1; then
			echo "Setting Boot Mode to EFI..."
			$DODRAC clearpending BIOS.Setup.1-1 > /dev/null 2>&1
			$DODRAC set BIOS.BiosBootSettings.BootMode Uefi > $tmplog 2>&1
			test $? -ne 0 && dracerr
			mkdjob BIOS.Setup.1-1 -r pwrcycle -s TIME_NOW
			dwaitmode Uefi
			test $? -ne 0 && dracerr
			sleep 30
		fi
		echo "Setting HDD boot order..."
		if test "$mode" = "Uefi"; then
			$DODRAC get BIOS.BiosBootSettings.UefiBootSeq > $tmplog 2>&1
			if test $? -eq 0; then
				cb=$(cat $tmplog | dos2unix | grep ^UefiBootSeq | awk -F= '{ print $2 }')
				if test -z "$cb"; then
					echo "error: cb is empty!"
					cat $tmplog
					exit 1
				fi
				case "$cb" in
				RAID.SL*)
					;;
				*)
					$DODRAC set bios.BiosBootSettings.UefiBootSeq RAID.Integrated.1-1 > $tmplog 2>&1
					test $? -ne 0 && dracerr
					;;
				esac
			fi
		else
			$DODRAC get bios.BiosBootSettings.HddSeq > $tmplog 2>&1
			if test $? -eq 0; then
				cb=$(cat $tmplog | dos2unix | grep ^HddSeq | awk -F= '{ print $2 }')
				if test -z "$cb"; then
					echo "error: cb is empty!"
					cat $tmplog
					exit 1
				fi
				case "$cb" in
					AHCI.Integrated.1-1|RAID.SL.*|RAID.Integrated.1-1)
					;;
				*)
					$DODRAC set BIOS.BiosBootSettings.HddSeq RAID.Integrated.1-1,Disk.SDInternal.1-1 > $tmplog 2>&1
					test $? -ne 0 && $DODRAC set bios.BiosBootSettings.HddSeq RAID.Integrated.1-1 > $tmplog 2>&1
					test $? -ne 0 && $DODRAC set bios.BiosBootSettings.HddSeq Disk.SDInternal.1-1> $tmplog 2>&1
					test $? -ne 0 && dracerr
					;;
				esac
			fi
		fi
		echo "Setting OneTimeBoot Mode..."
		if test $dracver -ge 3; then
			if test "$mode" = "Uefi"; then
				$DODRAC set BIOS.OneTimeBoot.OneTimeBootMode OneTimeUefiBootSeq > $tmplog 2>&1
			else
				$DODRAC set BIOS.OneTimeBoot.OneTimeBootMode OneTimeBootSeq > $tmplog 2>&1
			fi
		else
			$DODRAC set idrac.serverboot.BootOnce 1 > $tmplog 2>&1
		fi
		test $? -ne 0 && dracerr

		echo "Setting OneTimeBoot device to DVD..."
		$DODRAC set idrac.serverboot.FirstBootDevice VCD-DVD > $tmplog 2>&1
		$DODRAC set BIOS.OneTimeBoot.OneTimeBootSeqDev Optical.iDRACVirtual.1-1 > $tmplog 2>&1
#		test $? -ne 0 && dracerr

		echo "Disabling embeded NIC (if any)"
#		$DODRAC set BIOS.IntegratedDevices.IntegratedNetwork1 Enabled > $tmplog 2>&1
		$DODRAC set BIOS.IntegratedDevices.EmbNic1Nic2 DisabledOs > $tmplog 2>&1

		echo "Disabling TPM"
		$DODRAC set BIOS.SysSecurity.TpmSecurity Off > $tmplog 2>&1
}
		if test $skip -eq 0; then
			echo "Getting BIOS boot mode..."
			$DODRAC get BIOS.BiosBootSettings.BootMode > $tmplog 2>/dev/null
			test $? -ne 0 && dracerr
			mode=$(cat $tmplog | tr '\r' '\n' | grep ^BootMode= | awk -F= '{ print $2 }' | awk '{ print $1 }')
			echo "user_url: $user_url, dist: $dist"
			do_set_idrac=0
			([ "$user_url" = "" ] && [ "$dist" != "iso" ] && [ $skip -eq 0 ]) && do_set_idrac=1
			test $skip -eq 1 && do_set_idrac=0
			if test $do_set_idrac -eq 1; then
				set_idrac
			else
				echo "Setting OneTimeBoot Mode..."
				if test $dracver -ge 3; then
					if test "$mode" = "Uefi"; then
						$DODRAC set BIOS.OneTimeBoot.OneTimeBootMode OneTimeUefiBootSeq > $tmplog 2>&1
					else
						$DODRAC set BIOS.OneTimeBoot.OneTimeBootMode OneTimeBootSeq > $tmplog 2>&1
					fi
				else
					$DODRAC set idrac.serverboot.BootOnce 1 > $tmplog 2>&1
				fi
				test $? -ne 0 && dracerr
			fi
		fi

		echo "Disconnecting any connected image..."
		$DODRAC remoteimage -d > $tmplog 2>&1
		test $? -ne 0 && dracerr
		sleep 5
		echo "Mounting Image..."
		case $dell_mount_type in
		cifs)
			image=$(echo $url | sed 's+^http:++' | sed 's:/LinuxCOE::' | sed 's:/sysdes/:/coe_install/:')
			;;
		nfs)
			image=$(echo $url | sed "s+^http://++" | sed 's+/sysdes/+:/coe_images/+')
			;;
		http)
			image=$url
			;;
		https)
			image=$(echo $url | sed "s+^http://+https://+")
			;;
		esac
		$DODRAC remoteimage -c -u none -p none -l "$image" > $tmplog 2>&1
		test $? -ne 0 && dracerr
		if test $noreset -eq 0; then
			echo "Resetting system..."
			test -z "$dracver" && dracver=0
			if test $dracver -ge 3; then
				mkdjob BIOS.Setup.1-1 -r pwrcycle -s TIME_NOW
			else
				if test $force_reboot -eq 1; then
					$DODRAC serveraction hardreset -f
				else
					$DODRAC serveraction hardreset
				fi
			fi
		fi
	fi
fi

rm -f $tmp $tmplog
exit 0
