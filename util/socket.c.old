
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifdef __MINGW32__
#include "windows.h"
#include <errno.h>
#define socket_t SOCKET
#define socket_error(sock) (sock == INVALID_SOCKET)
#else
#include <sys/time.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netdb.h>
#include <sys/errno.h>
#define socket_t int
#define socket_error(sock) (sock < 0)
#endif

#ifdef DEBUG
#undef DEBUG
#endif
//#define DEBUG 1

#ifdef DEBUG
#define dprintf(format, args...) printf("%s(%d): " format,__FUNCTION__,__LINE__, ## args)
#else
#define dprintf(format, args...) /* noop */
#endif

int socket_write(int s,void *buffer,unsigned short bufsize) {
	register char *ptr = (char *) buffer;
	register int bytes_left = bufsize,count;
	int total;

	dprintf("bufsize: %d\n", bufsize);

	total = 0;
	while(bytes_left) {
		count = send(s,ptr,bytes_left,0);
		dprintf("count: %d\n", count);
		if (count < 0) {
			perror("error sending data");
			return -1;
		} else if (count < 1) {
			if (errno == EAGAIN)
				continue;
			else
				break;
		}
		bytes_left -= count;
		ptr += count;
		total += count;
	}
	dprintf("total: %d\n", total);
	return(total);
}

int socket_printf(int s,char *fmt,...) {
	char temp[1024];
	va_list ap;
	unsigned short len;

	/* Build the string */
	va_start(ap,fmt);
	vsprintf(temp,fmt,ap);
	va_end(ap);

	/* Write the data */
	len = strlen(temp);
	dprintf("temp: %s\n",temp);
	if (socket_write(s,temp,len) != len)
		return 1;
	else
		return 0;
}

int socket_recv(int s,void *buffer,unsigned short bufsize) {
        register int bytes;

	do {
		dprintf("calling recv...\n");
		bytes = recv(s,buffer,bufsize,0);
		dprintf("bytes: %d\n", bytes);
		if (bytes < 0) {
			perror("recv");
			return -1;
		}
	} while(bytes < 1 && errno == EAGAIN);

	dprintf("returning: %d\n", bytes);
        return bytes;
}

static char buffer[4096];
static char *sptr = buffer;
static char *eptr = buffer;

static int _refresh(int s) {
	register int bytes;

	/* Read a 'chunk' from the socket */
	if ((bytes = socket_recv(s,buffer,sizeof(buffer))) < 1) return 1;

	dprintf("bytes: %d\n", bytes);

	sptr = buffer;
	eptr = buffer + bytes;
	return 0;
}

int socket_gets(int s, char *buffer, unsigned short buflen) {
	int done;
	register char ch;
	register int i;

	dprintf("buflen: %d\n", buflen);
	done = i = 0;
	while(done == 0) {
		dprintf("sptr: %p, eptr: %p\n", sptr, eptr);
		while(sptr < eptr) {
			ch = *sptr++;
//			dprintf("ch: %d\n", ch);
			buffer[i++] = ch;
			if (ch == '\n' || i == buflen) {
				done = 1;
				break;
			}
		}
		if (done == 0) {
			if (_refresh(s))
				return 0;
		}
	}
	buffer[i] = 0;
	dprintf("returning: %d\n", i);
	return i;
}

int socket_connect(char *addr, int port, int timeout) {
	struct sockaddr_in sin;
	socket_t s;
	int sin_size = sizeof(sin);
	struct timeval tv;
#ifdef __MINGW32__
	WORD wVersionRequested;
	WSADATA wsaData;
	int err;

	wVersionRequested = MAKEWORD(2, 2);
	err = WSAStartup(wVersionRequested, &wsaData);
	if (err != 0) {
		printf("WSAStartup failed with error: %d\n", err);
		return 1;
	}
#endif

	s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (socket_error(s)) {
		perror("socket");
		return 1;
	}

	if (timeout > 0) {
		tv.tv_sec = timeout;
		tv.tv_usec = 0;
		if (setsockopt(s, SOL_SOCKET, SO_SNDTIMEO, (const char *)&tv, sizeof(tv)) < 0) {
			perror("setsockopt");
		}
	}

	/* Set up the addr info */
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = inet_addr((char *)addr);
	sin.sin_port = htons(port);

	if (connect(s, (struct sockaddr *)&sin, sin_size) < 0) {
		perror("connect");
		return 1;
	}

	dprintf("Connected!\n");

	return s;
}
