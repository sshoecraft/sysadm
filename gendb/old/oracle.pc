
#include <stdio.h>
#include <stdlib.h>
#include <sqlca.h>
#include "gendb.h"

EXEC SQL BEGIN DECLARE SECTION;
#define NEED_SQL_ERROR_TEXT
#include "oracle.h"
EXEC SQL END DECLARE SECTION;

static int connected = 0;
static void sql_not_found(void);
static void sql_error(void); 
static char temp[2048];

int set_ro_trans(void) {
	EXEC SQL SET TRANSACTION READ ONLY;
	return (sql_return_code == 0 ? 0 : 1);
}

int set_rw_trans(void) {
	EXEC SQL SET TRANSACTION USE ROLLBACK SEGMENT PROBERBS;
	return (sql_return_code == 0 ? 0 : 1);
}

int connect_to_db(char *userid) {
	sql_return_code = 0;
	if (!connected) {
		EXEC SQL WHENEVER SQLERROR DO sql_error();
		EXEC SQL WHENEVER NOT FOUND DO sql_not_found();
		EXEC SQL CONNECT :userid; 
		if (sql_return_code == 0) connected = 1;
	}
	return (sql_return_code == 0 ? 0 : 1);
}

int rollback_trans(void) {
	sql_return_code = 0;
	EXEC SQL ROLLBACK; 
	return (sql_return_code == 0 ? 0 : 1);
}

int commit_trans(void) {
	sql_return_code = 0;
	EXEC SQL COMMIT;
	return (sql_return_code == 0 ? 0 : 1);
}

list get_table_list(void) {
	TABLE_LIST info;
	list tables;
	ACR_REC acr;

	sql_return_code = 0;
	EXEC SQL DECLARE tn_cursor CURSOR FOR \
		SELECT owner,table_name,table_type \
		FROM all_catalog
		WHERE (table_type = 'TABLE' OR table_type = 'VIEW') AND
			(owner != 'SYS' AND owner != 'SYSTEM')
		ORDER BY owner,table_name;
	if (sql_return_code != 0) return 0;
	sql_return_code = 0;
	EXEC SQL OPEN tn_cursor;
	if (sql_return_code != 0) return 0;

	/* Create the itemlist */
	tables = CreateItemList();
	if (!tables) {
		strcpy(sql_error_text,"unable to create tables itemlist");
		return 0;
	}

	/* Get the table and view names */
	while(1) {
		sql_return_code = 0;
		EXEC SQL FETCH tn_cursor INTO :acr;
		if (sql_return_code != 0) break;
		trim(acr.owner);
		trim(acr.table_name);
		strcpy(info.owner,acr.owner);
		strcpy(info.name,acr.table_name);
		AddItem(tables,&info,TABLE_LIST_SIZE);
	}
	EXEC SQL CLOSE tn_cursor;
	return tables;
}

static int get_table_comments(char *,char *,char *);
static list get_field_info(char *,char *);
static list get_table_keys(char *,char *);

TABLE *get_table_info(char *owner,char *table) {
	static TABLE info;

	/* Init the structure */
	info.owner[0] = info.name[0] = 0;
	info.comment = 0;
	info.fields = 0;

	/* Add in the owner and name */
	strcpy(info.owner,stredit(owner,"LOWERCASE"));
	strcpy(info.name,stredit(table,"LOWERCASE"));

	/* Get the comments */
	temp[0] = 0;
	if (get_table_comments(owner,table,temp)) return 0;
	info.comment = (char *) malloc(strlen(temp)+1);
	if (!info.comment) {
		strcpy(sql_error_text,"memory allocation error");
		return 0;
	}
	strcpy(info.comment,temp);

	/* Get the field info */
	info.fields = get_field_info(owner,table);
	if (!info.fields) return 0;

	/* Get the primary keys */
	info.keys = get_table_keys(owner,table);
	if (!info.keys && sql_return_code != 100)
		return 0;
	return(&info);
}

static int get_table_comments(char *owner,char *table,char *comments) {
	sql_return_code = 0;
	EXEC SQL SELECT comments \
		INTO :comments \
		FROM all_tab_comments \
		WHERE owner = :owner AND table_name = :table;
	trim(comments);
	return (sql_return_code == 0 ? 0 : 1);
}

static int get_field_comments(char *,char *,char *,char *);

static list get_field_info(char *owner,char *table) {
	COLUMN info;
	list fields;
	ATC_REC atc;
	int size;

	/* Create the fields itemlist */
	fields = CreateItemList();
	if (!fields) {
		strcpy(sql_error_text,"unable to create fields itemlist");
		return 0;
	}

	/* Open the cursor */
	if (open_atc_cursor(owner,table)) return 0;

	/* Get all the field names */
	while(fetch_atc_record(&atc)==0) {
/*
		printf("name: %s,type: %s,len: %1.0f,prec: %1.0f,scale: %1.0f\n",
			atc.column_name,atc.data_type,atc.data_length,
			atc.data_precision,atc.data_scale);
*/
		/* Init the info structure */
		info.name[0] = 0;
		info.comment = 0;
		info.type = FT_UNK;
		info.len = 0;

		/* Fill in the info structure */
		strcpy(info.name,stredit(atc.column_name,"LOWERCASE"));
		if (strcmp(atc.data_type,"CHAR")==0) {
			info.type = FT_CHAR;
			info.len = atc.data_length;
			if (info.len > 1) info.len++;
		}
		else if (strcmp(atc.data_type,"VARCHAR")==0) {
			info.type = FT_STRING;
			info.len = atc.data_length;
			if (info.len > 1) info.len++;
		}
		else if (strcmp(atc.data_type,"VARCHAR2")==0) {
			info.type = FT_STRING;
			info.len = atc.data_length + 1;
		}
		else if (strcmp(atc.data_type,"NUMBER")==0) {
			size = atc.data_length;
			size -= atc.data_precision - atc.data_scale;
			if (atc.data_scale == 0) {
				if (size < 5)
					info.type = FT_SHORT;
				else if (size < 10)
					info.type = FT_LONG;
				else
					info.type = FT_DOUBLE;
			}
			else {
				if (size < 8)
					info.type = FT_FLOAT;
				else if (size < 16)
					info.type = FT_DOUBLE;
				else
					info.type = FT_LONGDBL;
			}
		}

		/* See if there's a comment for this column */
		temp[0] = 0;
		if (get_field_comments(owner,table,atc.column_name,temp)) {
			printf("get_field_comments sqlcode: %d",
				sql_return_code);
			return 0;
		}
		info.comment = (char *) malloc(strlen(temp)+1);
		if (!info.comment) {
			strcpy(sql_error_text,"memory allocation error");
			return 0;
		}
		strcpy(info.comment,temp);

		/* Add this field to the list */
		AddItem(fields,&info,COLUMN_SIZE);
	}

	/* Close the cursor */
	close_atc_cursor();
	return fields;
}

static int get_field_comments(char *owner,char *table,char *column,char *comments) {
	sql_return_code = 0;
	EXEC SQL SELECT comments INTO :comments FROM all_col_comments \
		WHERE owner = :owner AND table_name = :table AND \
			column_name = :column;
	trim(comments);
	return (sql_return_code == 0 ? 0 : 1);
}

static list get_table_keys(char *owner,char *table) {
	list keys;
	ACC_REC acc;
	char *ptr;

	sql_return_code = 0;
	EXEC SQL SELECT DISTINCT constraint_name INTO :temp \
			FROM all_constraints \
			WHERE owner = :owner AND table_name = :table AND \
				constraint_type = 'P';
	printf("sqlcode: %d\n",sql_return_code);
	if (sql_return_code != 0) return 0;
	trim(temp);

	/* Declare and open the all_cons_columns cursor */
	sql_return_code = 0;
	EXEC SQL DECLARE acc_cursor CURSOR FOR
		SELECT * FROM all_cons_columns \
			WHERE owner = :owner AND table_name = :table AND \
				constraint_name = :temp \
			ORDER BY position;
	if (sql_return_code != 0) return 0;
	EXEC SQL OPEN acc_cursor;
	if (sql_return_code != 0) return 0;

	/* Create the keys itemlist */
	keys = CreateItemList();
	if (!keys) {
		strcpy(sql_error_text,"unable to create keys itemlist");
		sql_return_code = -1;
		return 0;
	}

	/* Get the keys */
	while(1) {
		sql_return_code = 0;
		EXEC SQL FETCH acc_cursor INTO :acc;
		if (sql_return_code != 0) break;
		ptr = stredit(acc.column_name,"TRIM,LOWERCASE");
		AddItem(keys,ptr,strlen(ptr)+1);
	}
	if (sql_return_code != 100) {
		DestroyItemList(keys);
		return 0;
	}

	/* Close the cursor & return the list */
	EXEC SQL CLOSE acc_cursor;
	return keys;
}

int open_atc_cursor(char *owner,char *table_name) {
	sql_return_code = 0;
	EXEC SQL DECLARE atc_cursor CURSOR FOR \
		SELECT column_id,column_name,data_type,data_length, \
			data_precision,data_scale \
		FROM all_tab_columns \
		WHERE owner = :owner AND table_name = :table_name
		ORDER BY column_id;
	if (sql_return_code != 0) return 1;
	EXEC SQL OPEN atc_cursor;
	return (sql_return_code == 0 ? 0 : 1);
}

int fetch_atc_record(ATC_REC *rec) {
	sql_return_code = 0;
	EXEC SQL FETCH atc_cursor INTO :rec;
	if (sql_return_code == 0) {
		trim(rec->column_name);
		trim(rec->data_type);
	}
	return (sql_return_code == 0 ? 0 : 1);
}

int close_atc_cursor(void) {
	sql_return_code = 0;
	EXEC SQL CLOSE atc_cursor;
	return (sql_return_code == 0 ? 0 : 1);
}

static void sql_error() { 
	EXEC SQL WHENEVER SQLERROR CONTINUE; 
	strcpy(sql_error_text,sqlca.sqlerrm.sqlerrmc);
	sql_return_code = sqlca.sqlcode;
	switch(sqlca.sqlcode) {
		case -1:
			switch(sqlca.sqlerrm.sqlerrml) {
				case 65:
					sql_return_code = -1001;
					break;
			}
			break;
		case -1405:
			sql_return_code = 0;
			sql_error_text[0] = 0;
			break;
		case -3144:
			connected = 0;
			break;
	}
	return;
}

static void sql_not_found(void) {
	sql_return_code = 100;
	return;
}
